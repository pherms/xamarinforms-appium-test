on:
  workflow_dispatch:

jobs:
  code_analysis:
    name: Code analysis
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Sonar Scanner
        run: dotnet tool install --global dotnet-sonarscanner
        
      - name: Run build and Sonarscanner
        env:
          SONARENABLESCAN: "true"
          SONARPROJECTKEY: simpleapp
          SONARPROJECTNAME: "Simple App"
          
        run: |
          if [[ "$SONARENABLESCAN" == "true" ]]; then
              sonar_begin_cmd="/dotnet-sonarscanner begin /k:\"${INPUT_SONARPROJECTKEY}\" /n:\"${INPUT_SONARPROJECTNAME}\" /d:sonar.login=\"${SONAR_TOKEN}\" /d:sonar.host.url=\"${INPUT_SONARHOSTNAME}\""
              if [ -n "$INPUT_SONARORGANIZATION" ]; then
                  sonar_begin_cmd="$sonar_begin_cmd /o:\"${INPUT_SONARORGANIZATION}\""
              fi
              if [ -n "$INPUT_SONARBEGINARGUMENTS" ]; then
                  sonar_begin_cmd="$sonar_begin_cmd $INPUT_SONARBEGINARGUMENTS"
              fi
              # Check Github environment variable GITHUB_EVENT_NAME to determine if this is a pull request or not. 
              if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
                  # Sonarqube wants these variables if build is started for a pull request
                  # Sonarcloud parameters: https://sonarcloud.io/documentation/analysis/pull-request/
                  # sonar.pullrequest.key	                Unique identifier of your PR. Must correspond to the key of the PR in GitHub or TFS. E.G.: 5
                  # sonar.pullrequest.branch	            The name of your PR Ex: feature/my-new-feature
                  # sonar.pullrequest.base	            The long-lived branch into which the PR will be merged. Default: master E.G.: master
                  # sonar.pullrequest.github.repository	SLUG of the GitHub Repo (owner/repo)

                  # Extract Pull Request numer from the GITHUB_REF variable
                  PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')

                  # Add pull request specific parameters in sonar scanner
                  sonar_begin_cmd="$sonar_begin_cmd /d:sonar.pullrequest.key=$PR_NUMBER /d:sonar.pullrequest.branch=$GITHUB_HEAD_REF /d:sonar.pullrequest.base=$GITHUB_BASE_REF /d:sonar.pullrequest.github.repository=$GITHUB_REPOSITORY /d:sonar.pullrequest.provider=github"

              fi
          fi

          #-----------------------------------
          # Build Sonarscanner end command
          #-----------------------------------
          if [[ "$INPUT_SONARENABLESCAN" == "true" ]]; then
              sonar_end_cmd="/dotnet-sonarscanner end /d:sonar.login=\"${SONAR_TOKEN}\""
          fi

          #-----------------------------------
          # Dotnet restore command
          #-----------------------------------
          dotnet_restore_cmd="dotnet restore"
          if [ -n "$INPUT_DOTNETBUILDARGUMENTS" ]; then
              dotnet_restore_cmd="$dotnet_restore_cmd $GITHUB_WORKSPACE/$INPUT_DOTNETBUILDARGUMENTS"
          fi

          #-----------------------------------
          # Build dotnet build command
          #-----------------------------------
          dotnet_build_cmd="dotnet build"
          if [ -n "$INPUT_DOTNETBUILDARGUMENTS" ]; then
              dotnet_build_cmd="$dotnet_build_cmd $INPUT_DOTNETBUILDARGUMENTS"
          fi

          #-----------------------------------
          # Build dotnet test command
          #-----------------------------------
          dotnet_test_cmd="dotnet test"
          if [ -n "$INPUT_DOTNETTESTARGUMENTS" ]; then
              dotnet_test_cmd="$dotnet_test_cmd $INPUT_DOTNETTESTARGUMENTS"
          fi

          #-----------------------------------
          # Execute shell commands
          #-----------------------------------
          echo "Shell commands"

          #Run Dotnet Restore command
          echo "Restoring NuGet packages found in $GITHUB_WORKSPACE/$INPUT_DOTNETBUILDARGUMENTS"
          sh -c "${dotnet_restore_cmd}"

          #Run Sonarscanner .NET Core "begin" command.
          if [[ "$INPUT_SONARENABLESCAN" == "true" ]]; then
              echo "sonar_begin_cmd: $sonar_begin_cmd"
              sh -c "$sonar_begin_cmd"
          fi

          #Run dotnet build command
          echo "dotnet_build_cmd: $dotnet_build_cmd"
          sh -c "${dotnet_build_cmd}"

          #Run dotnet test command (unless user choose not to)
          if ! [[ "${INPUT_DOTNETDISABLETESTS,,}" == "true" || "${INPUT_DOTNETDISABLETESTS}" == "1" ]]; then
              echo "dotnet_test_cmd: $dotnet_test_cmd"
              sh -c "${dotnet_test_cmd}"
          fi

          #Run Sonarscanner .NET Core "end" command
          if [[ "$INPUT_SONARENABLESCAN" == "true" ]]; then
              echo "sonar_end_cmd: $sonar_end_cmd"
              sh -c "$sonar_end_cmd"
          fi

